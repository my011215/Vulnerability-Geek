from models.user import User
from flask import request, jsonify
from werkzeug.security import check_password_hash, generate_password_hash
from jose import jwt
from datetime import datetime, timedelta
from flask import current_app
from database import db



class UserService(object):
    @staticmethod
    def deal_login():
        # 用户登录
        data = request.get_json()
        username = data.get('username')
        password = data.get('password')
        print(username)

        # 检查用户名和密码是否存在
        if not username or not password:
            return jsonify({'message': 'Missing username or password', 'code': 400}), 400

        # 查找用户
        user = User.query.filter_by(username=username).first()

        # 加密密码的方法
        print(generate_password_hash(password))

        # 检验密码是否正确
        if not user or not check_password_hash(user.password, password):
            return jsonify({'message': 'Invalid username or password', 'code': 60204}), 401

        try:
            token = UserService.generate_tokens(user.id, user.permission)
        except Exception as e:
            print(e)
            return jsonify({'message': 'Token generation error', 'code': 500}), 500

        return jsonify({'data': {'token': token}, 'code': 200}), 200

    @staticmethod
    def generate_tokens(uid, permission):
        # 生成token
        # params：是生成token的参数
        params = {
            'id': uid,
            'permission': permission,
            # exp：代表token的有效时间,datetime.utcnow():代表当前时间
            # timedelta:表示转化为毫秒
            'exp': datetime.utcnow() + timedelta(days=current_app.config['EXPIRES_IN'])
        }
        # print(params)
        # key:密钥,
        # algorithm:算法，算法是SHA-256
        # SHA-256:密码散列函数算法.256字节长的哈希值（32个长度的数组）---》16进制字符串表示，长度为64。信息摘要，不可以逆
        return jwt.encode(claims=params, key=current_app.config['SECRET_KEY'], algorithm='HS256')